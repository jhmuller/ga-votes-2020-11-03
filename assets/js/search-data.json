{
  
    
        "post0": {
            "title": "Title",
            "content": "&lt;/p&gt; . Analysis of data on the elections in Georgia . Election date 2020-11-03 . &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt; . Python imports . and defining a few utility functions . whoami(): returns the name of the calling function | . . &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; import os import sys import inspect import warnings import datetime import time import pdb import xml import re import openpyxl from collections import namedtuple from collections import OrderedDict import pandas as pd import numpy as np import matplotlib as mpl import matplotlib.pyplot as plt import plotnine from tqdm import tqdm import collections import zipfile import selenium from selenium import webdriver from selenium.webdriver.support.ui import Select def whoami(): return sys._getframe(1).f_code.co_name now = datetime.datetime.now now() . datetime.datetime(2020, 12, 27, 2, 15, 38, 341027) . &lt;/p&gt; . Selenium setup . for automating control of a browser, used mainly to automate downloads . &lt;/span&gt;&lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; def chrome_options_download_dir(ddir): if not os.path.isdir(ddir): os.mkdir(ddir) prefs = {&quot;download.default_directory&quot; : os.path.abspath(ddir)} options = webdriver.ChromeOptions() options.add_experimental_option(&quot;prefs&quot;,prefs) options.add_argument(&quot;download.default_directory=&quot;+os.path.abspath(ddir)) return options . &lt;/p&gt; . Results or vote count data . Data Source is . https://results.enr.clarityelections.com/GA/105369/web.264614/#/summary . Look on the right-hand side of the page for a &quot;Reports&quot; section. There should be some download icons. If you click on those you can get the data. . I chose to use the XML version of the data. Maybe not the best choice but I seem to have made it work. . Data on election results, that is votes cast for each candidate. . Data is broken down by . Contest, e.g. President, one of the Senate races and many more, | County | Type of vote (Absentee, Early in-person, Election day in-person, Provisional) | . Other possible sources for the senate race . www.nbcnews.com/politics/2020-special-elections/georgia-senate-results . https://results.enr.clarityelections.com/GA/105369/web.264614/#/detail/10000 . . &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ToDo: write some code to automaticly download the data file if it is not present locally . fpath = &quot;./data/detailxml/detail.xml&quot; import xml.etree.ElementTree as et def node_msg(node, pref= &#39;&#39;, tag=True, attribs=None): if attribs is None: attribs = [] if isinstance(attribs, str): attribs = [attribs] msg = &quot;&quot; msg += &quot;{0}{1} tag: {2}&quot;.format(pref,node, node.tag) pref = pref+&quot; &quot; for at in attribs: atval = None if at in node.attrib.keys(): atval = node.attrib[at] msg += &quot; n{0}{1} &#39;{2}&#39;&quot;.format(pref, at, atval) return msg . CountyVoteTup = collections.namedtuple(&quot;CountyVoteTup&quot;,[&#39;CountyName&#39;, &#39;Votes&#39;]) VoteTypeTup = collections.namedtuple(&quot;VoteTypeTup&quot;, [&#39;CountyName&#39;, &#39;Votes&#39;, &#39;VoteType&#39;]) ChoiceTup = collections.namedtuple(&quot;ChoiceTup&quot;, [&#39;CountyName&#39;, &#39;Votes&#39;, &#39;VoteType&#39;,&#39;Choice&#39;]) ContestTup = collections.namedtuple(&quot;ContestTup&quot;, [&#39;CountyName&#39;, &#39;Votes&#39;, &#39;VoteType&#39;,&#39;Choice&#39;, &#39;Contest&#39;]) def doCountyVote(node): county_name = node.attrib[&#39;name&#39;] votes = int(node.attrib[&#39;votes&#39;]) cv_tup = CountyVoteTup(county_name, votes) return cv_tup def doVoteType(root_node, pref=&#39;&#39;, verbosity=0): if verbosity &gt; 0: print(node_msg(root_node, pref=pref+&#39; &#39;, attribs=&#39;text&#39;)) VoteTypeName = root_node.attrib[&#39;name&#39;] counties = [] votetype_tups = [] for node in root_node: if node.tag == &quot;County&quot;: cv = doCountyVote(node) vt = VoteTypeTup(*cv, VoteTypeName) votetype_tups.append(vt) counties.append(cv) res = pd.DataFrame(counties) res.set_index(&quot;CountyName&quot;, inplace=True) res.rename(columns={&quot;Votes&quot;:VoteTypeName}, inplace=True) return (res, votetype_tups) def doChoice(root_node, pref=&#39;&#39;, verbosity=0): if verbosity &gt; 0: print(node_msg(root_node, pref=pref+&#39; &#39;, attribs=&#39;text&#39;)) ChoiceText = root_node.attrib[&#39;text&#39;] res = None choice_tups = [] for node in root_node: if node.tag == &quot;VoteType&quot;: df, vts = doVoteType(node) for vt in vts: choice = ChoiceTup(*vt, ChoiceText) choice_tups.append(choice) if res is None: res = df else: res = res.join(df, how=&quot;left&quot;) res[&#39;Total&#39;] = res.sum(axis=1) res.columns = pd.MultiIndex.from_product([[ChoiceText], res.columns]) return res, choice_tups def doContest(root_node, pref=&#39;&#39;, verbosity=0): if verbosity &gt; 0: print(node_msg(root_node, pref=pref+&#39; &#39;, attribs=&#39;text&#39;)) res = None ContestText = root_node.attrib[&#39;text&#39;] contest_tups = [] for node in root_node: if node.tag == &quot;Choice&quot;: choice, tups = doChoice(node) for tup in tups: contest_tup = ContestTup(*tup, ContestText) contest_tups.append(contest_tup) if res is None: res = choice else: res = res.join(choice, how=&#39;left&#39;) return (res, contest_tups) . xtree = et.parse(fpath) senate_races = [] xroot = xtree.getroot() tups = [] contests = {} for i, node in enumerate(tqdm(xroot)): if node.tag == &#39;Contest&#39;: if &#39;text&#39; in node.attrib.keys(): if &#39;US Senate&#39; in node.attrib[&#39;text&#39;] or &#39;President&#39; in node.attrib[&#39;text&#39;] : contest = node.attrib[&#39;text&#39;] res, contest_tups = doContest(node, pref=&#39;&#39;) tups.extend(contest_tups) print(contest) contests[contest] = res contests.keys() contestsdf = pd.DataFrame(tups) contestsdf[&#39;CountyName&#39;] = contestsdf[&#39;CountyName&#39;].apply(lambda x: x.upper()) contestsdf.groupby(by=&quot;Contest&quot;).sum() . 0%| | 0/303 [00:00&lt;?, ?it/s] . President of the United States US Senate (Perdue) . 100%|███████████████████████████████████████████████████████████████████████████████| 303/303 [00:00&lt;00:00, 953.80it/s] . US Senate (Loeffler) - Special . . Votes . Contest . President of the United States 4998482 | . US Senate (Loeffler) - Special 4914361 | . US Senate (Perdue) 4952175 | . print(contestsdf[&#39;VoteType&#39;].unique()) contestsdf.head(2) . [&#39;Election Day Votes&#39; &#39;Absentee by Mail Votes&#39; &#39;Advanced Voting Votes&#39; &#39;Provisional Votes&#39;] . CountyName Votes VoteType Choice Contest . 0 APPLING | 1753 | Election Day Votes | Donald J. Trump (I) (Rep) | President of the United States | . 1 ATKINSON | 716 | Election Day Votes | Donald J. Trump (I) (Rep) | President of the United States | . grp_contests = contestsdf.groupby(by=[&#39;VoteType&#39;,&#39;Choice&#39;, &#39;Contest&#39;]).sum() grp_contests.sort_values(by=[&#39;Contest&#39;, &#39;VoteType&#39;,&#39;Choice&#39;],inplace=True) grp_contests.reset_index(inplace=True) grp_contests.head() . VoteType Choice Contest Votes . 0 Absentee by Mail Votes | Donald J. Trump (I) (Rep) | President of the United States | 451157 | . 1 Absentee by Mail Votes | Jo Jorgensen (Lib) | President of the United States | 16057 | . 2 Absentee by Mail Votes | Joseph R. Biden (Dem) | President of the United States | 849729 | . 3 Advanced Voting Votes | Donald J. Trump (I) (Rep) | President of the United States | 1419161 | . 4 Advanced Voting Votes | Jo Jorgensen (Lib) | President of the United States | 25209 | . grp_contests.loc[grp_contests[&#39;Contest&#39;].str.contains(&#39;President&#39;),] grp_contests.sort_values(by=&quot;Votes&quot;, inplace=True) grp_contests.loc[grp_contests[&#39;Contest&#39;].str.contains(&#39;Loeffler&#39;),].tail(10) . VoteType Choice Contest Votes . 37 Advanced Voting Votes | Deborah Jackson (Dem) | US Senate (Loeffler) - Special | 173820 | . 19 Absentee by Mail Votes | Doug Collins (Rep) | US Senate (Loeffler) - Special | 185300 | . 68 Election Day Votes | Raphael Warnock (Dem) | US Senate (Loeffler) - Special | 205110 | . 59 Election Day Votes | Doug Collins (Rep) | US Senate (Loeffler) - Special | 211902 | . 25 Absentee by Mail Votes | Kelly Loeffler (I) (Rep) | US Senate (Loeffler) - Special | 249090 | . 65 Election Day Votes | Kelly Loeffler (I) (Rep) | US Senate (Loeffler) - Special | 298209 | . 39 Advanced Voting Votes | Doug Collins (Rep) | US Senate (Loeffler) - Special | 581871 | . 28 Absentee by Mail Votes | Raphael Warnock (Dem) | US Senate (Loeffler) - Special | 601522 | . 45 Advanced Voting Votes | Kelly Loeffler (I) (Rep) | US Senate (Loeffler) - Special | 724577 | . 48 Advanced Voting Votes | Raphael Warnock (Dem) | US Senate (Loeffler) - Special | 807005 | . presdf = contestsdf[contestsdf[&#39;Contest&#39;].str.contains(&quot;President&quot;)] presByCounty = presdf[[&quot;CountyName&quot;, &quot;Votes&quot;]].groupby(&quot;CountyName&quot;).sum() presByCounty.sort_values(by=&quot;Votes&quot;, ascending=False, inplace=True) presByCounty.head(4) . Votes . CountyName . FULTON 524659 | . GWINNETT 413865 | . COBB 393746 | . DEKALB 370804 | . loefflerdf = contestsdf[contestsdf[&#39;Contest&#39;].str.contains(&quot;Loeffler&quot;)] purduedf = contestsdf[contestsdf[&#39;Contest&#39;].str.contains(&quot;Loeffler&quot;)] if True: gdf = presdf[[&#39;VoteType&#39;, &#39;Votes&#39;, &#39;Contest&#39;]].groupby(&#39;VoteType&#39;).sum() gdf[&quot;Pct&quot;] = 100*np.round(gdf / gdf.sum(),3) print(&quot;Votes counted by Vote Type&quot;) print(gdf) print(&quot;&quot;) print(&quot;Total votes counted (millions): {0}&quot;.format(gdf[&quot;Votes&quot;].sum()/10.0**6)) . Votes counted by Vote Type Votes Pct VoteType Absentee by Mail Votes 1316943 26.3 Advanced Voting Votes 2694879 53.9 Election Day Votes 975540 19.5 Provisional Votes 11120 0.2 Total votes counted (millions): 4.998482 . votesByCounty = contestsdf[[&quot;CountyName&quot;, &quot;Votes&quot;]].groupby(&quot;CountyName&quot;).sum() votesByCounty.sort_values(by=&quot;Votes&quot;, ascending=False, inplace=True) votesByCounty.head(4) . Votes . CountyName . FULTON 1563044 | . GWINNETT 1227786 | . COBB 1173481 | . DEKALB 1105580 | . &lt;/p&gt; . Data on registered voters . Source is . https://sos.ga.gov/index.php/Elections/voter_registration_statistics . I choose the most granular, that is, by . County, | Age, | Race | . Right now not doing anything with the Age or Race data, just aggregating to County. . . &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; To Do: write code to automaticly download the data if not present locally . if True: dpath = &quot;./data/&quot; voterfile = &quot;Active_Voters_by_Race_Gender_and_Age_as_of_November_1_2020.xlsx&quot; voterpath = os.path.join(dpath, voterfile) if not os.path.isdir(dpath): warnings.warn(&quot;{0} is not a directory&quot;.format(dpath)) if not os.path.isfile(voterpath): warnings.warn(&quot;No file {0} in dir {1}&quot;.format(voterfile, dpath)) with open(voterpath) as vp: racedf = pd.read_excel(voterpath, nrows=7, engine=&#39;openpyxl&#39;).iloc[:,:2] racedf.columns = [&quot;RaceCode&quot;, &quot;RaceDescription&quot;] racedf[&quot;RaceCode&quot;] = racedf[&quot;RaceCode&quot;].apply(lambda x: x[:-2]) racedf.set_index(&quot;RaceCode&quot;, inplace=True) race = racedf.squeeze() race_dict = race.to_dict() print(race_dict) . {&#39;AI&#39;: &#39;AMERICAN INDIAN OR ALASKAN NATIVE&#39;, &#39;AP&#39;: &#39;ASIAN OR PACIFIC ISLANDER&#39;, &#39;BH&#39;: &#39;BLACK NOT OF HISPANIC ORIGIN&#39;, &#39;HP&#39;: &#39;HISPANIC&#39;, &#39;WH&#39;: &#39;WHITE NOT OF HISPANIC ORIGIN&#39;, &#39;OT&#39;: &#39;OTHER&#39;, &#39;UK&#39;: &#39;UNKNOWN&#39;} . votersdf = pd.read_excel(voterpath, skiprows=8, engine=&#39;openpyxl&#39;) if votersdf.columns[-1] != &quot;TOTAL VOTERS&quot;: votersdf = votersdf.iloc[:,:-1] colnames = [re.sub(&quot; s+&quot;, &quot;-&quot;, c.strip()) for c in votersdf.columns] votersdf.columns = colnames votersdf.drop(&#39;COUNTY-ID&#39;, axis=1, inplace=True) votersdf = votersdf.loc[votersdf[&quot;COUNTY-NAME&quot;].notna()] colname_parts = [c.split(&quot;-&quot;) for c in votersdf.columns] newnames = [] for parts in colname_parts: newparts = parts if parts[0] in race_dict.keys(): newparts = [race_dict[parts[0]].split(&quot; &quot;)[0]] + parts[1:] newnames.append(&quot;-&quot;.join(newparts)) votersdf.columns = newnames votersdf.rename(columns={&quot;COUNTY-NAME&quot;:&quot;CountyName&quot;, &#39;TOTAL-VOTERS&#39;:&#39;TotalVoters&#39;}, inplace=True) votersdf[&#39;CountyName&#39;] = votersdf[&#39;CountyName&#39;].apply(lambda x: x.upper()) print(&quot;{0} rows {1} cols&quot;.format(*votersdf.shape)) votersdf.head(2) . 1594 rows 24 cols . CountyName VOTER-AGE-RANGE AMERICAN-MALE-VOTERS AMERICAN-FEMALE-VOTERS AMERICAN-UNKNOWN-VOTERS ASIAN-MALE-VOTERS ASIAN-FEMALE-VOTERS ASIAN-UNKNOWN-VOTERS BLACK-MALE-VOTERS BLACK-FEMALE-VOTERS ... WHITE-MALE-VOTERS WHITE-FEMALE-VOTERS WHITE-UNKNOWN-VOTERS OTHER-MALE-VOTERS OTHER-FEMALE-VOTERS OTHER-UNKNOWN-VOTERS UNKNOWN-MALE-VOTERS UNKNOWN-FEMALE-VOTERS UNKNOWN-UNKNOWN-VOTERS TotalVoters . 0 APPLING | 18-24 | 2 | 1 | 0 | 3 | 5 | 0 | 120 | 110 | ... | 436 | 429 | 1 | 5 | 19 | 0 | 95 | 60 | 2 | 1374 | . 1 APPLING | 25-29 | 0 | 0 | 0 | 4 | 1 | 0 | 81 | 89 | ... | 282 | 298 | 1 | 3 | 7 | 0 | 38 | 30 | 0 | 866 | . 2 rows × 24 columns . gcols = [&quot;CountyName&quot;] votersByCounty = votersdf[[&quot;CountyName&quot;, &#39;TotalVoters&#39; ]].groupby(by=gcols).sum() votersByCounty.sort_values(by=&quot;TotalVoters&quot;, ascending=False, inplace=True) votersByCounty.dtypes . TotalVoters int64 dtype: object . &lt;/p&gt; . Combining Voters and Votes by County . &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; print(presByCounty.index.values[:10]) print(votersByCounty.index.values[:10]) . [&#39;FULTON&#39; &#39;GWINNETT&#39; &#39;COBB&#39; &#39;DEKALB&#39; &#39;CHEROKEE&#39; &#39;CHATHAM&#39; &#39;FORSYTH&#39; &#39;HENRY&#39; &#39;CLAYTON&#39; &#39;HALL&#39;] [&#39;FULTON&#39; &#39;GWINNETT&#39; &#39;DEKALB&#39; &#39;COBB&#39; &#39;CHATHAM&#39; &#39;CLAYTON&#39; &#39;CHEROKEE&#39; &#39;HENRY&#39; &#39;FORSYTH&#39; &#39;RICHMOND&#39;] . presCombo = presByCounty.join(votersByCounty) presCombo[&quot;PctVoted&quot;] = np.round(100*presCombo[&#39;Votes&#39;] / presCombo[&#39;TotalVoters&#39;],3) presCombo.sort_values(by=&quot;Votes&quot;, inplace=True) presCombo.tail(10) . Votes TotalVoters PctVoted . CountyName . HALL 90523 | 128535 | 70.427 | . CLAYTON 112344 | 194338 | 57.809 | . HENRY 122742 | 172241 | 71.262 | . FORSYTH 129305 | 164279 | 78.711 | . CHATHAM 133420 | 202999 | 65.724 | . CHEROKEE 144830 | 190605 | 75.984 | . DEKALB 370804 | 547802 | 67.689 | . COBB 393746 | 537659 | 73.233 | . GWINNETT 413865 | 582917 | 70.999 | . FULTON 524659 | 808742 | 64.873 | . &lt;/p&gt; . Voter Registration . Source is . https://elections.sos.ga.gov/Elections/voterhistory.do . According to the site this is data on &quot;credit for voting by qualified electors&quot; . I believe there is a record for each registered voter. . According to the Voter History File Layout at the bottom, the fields in each line are as follows: 1 County Number: 3 characters 2 Registration Number: 8 characters 3 Election Date: 8 characters 4 Election Type: 3 characters, see the web page 5 Party: 2 characters 6 Absentee: 1 character (&#39;Y&#39; or &#39;N&#39;) 7 Provisional: 1 character (&#39;Y&#39; or &#39;N&#39;) 8 Supplemental: 1 character (&#39;Y&#39; of &#39;N&#39;) . I&#39;m not sure what &quot;Registration Number&quot; is but I am guessing it is tied to a specific voter. The documntation for &quot;Election Type&quot; lists the following possibilities: . 001 GENERAL PRIMARY 002 GENERAL PRIMARY RUN-OFF 003 GENERAL 004 GENERAL ELECTION RUNOFF 005 SPECIAL ELECTION 006 SPECIAL RUNOFF 007 NON- PARTISAN 008 SPECIAL/NON-PARTISAN 009 RECALL 010 PPP SPECIAL PRIMARY RUNOFF SPECIAL PRIMARY &lt;/ul&gt;The documentation gives the following possibilities for &quot;Party&quot; . D Democratic | R Republican | NP Non-Partisan | . . &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; def get_individual_voter_reg_files(download_dir, verbosity=0): if verbosity &gt; 0: print(&quot;{0} download_dir= {1}, &lt;{2}&gt;&quot;.format(whoami(), download_dir, datetime.datetime.now())) options = chrome_options_download_dir(download_dir) chromedriver_path = os.path.join(&#39;chromedriver.exe&#39;) driver = webdriver.Chrome(executable_path=chromedriver_path, options=options) url = &quot;https://elections.sos.ga.gov/Elections/voterhistory.do&quot; driver.get(url) # find year selector and select 2020 year_select = Select(driver.find_element_by_id(&quot;nbElecYear&quot;)) year_select.select_by_value(&quot;2020&quot;) # find the election selector and select 11/03/2020 elec_select = Select(driver.find_element_by_id(&quot;idElection&quot;)) elec_select.select_by_visible_text(&quot;11/03/2020 - NOVEMBER 3, 2020 GENERAL/SPECIAL ELECTION&quot;) # find the elecCat selector and select StaeWide cat_select = Select(driver.find_element_by_id(&quot;cdElecCat&quot;)) cat_select.select_by_visible_text(&quot;STATE WIDE&quot;) time.sleep(0.5) # click on button to download 2020 file if verbosity &gt; 0: print(&quot; downloading 2020 file&quot;) driver.find_element_by_partial_link_text(&quot;2020&quot;).click() time.sleep(0.5) fname = &quot;2020.zip&quot; max_wait_secs = 9 file_there = False start_dt = datetime.datetime.now() if verbosity &gt; 0: print(&quot;looking for file {0} in {1}&quot;.format(fname, download_dir)) while not file_there: files = os.listdir(download_dir) if fname in files: if verbosity &gt; 0: print(&quot; Found it &#39;{0}&#39;&quot;.format(fname)) file_there = True break cur_dt = datetime.datetime.now() if verbosity &gt; 0: print(&quot; Not there yet &lt;{0}&gt;&quot;.format(cur_dt)) time.sleep(1) if (cur_dt - start_dt).total_seconds() &gt; max_wait_secs: if verbosity &gt; 0: print(&quot;{0} not in {1}, can&#39;t wait any longer&quot;.format(fname, download_dir)) break if file_there: if verbosity &gt; 0: print(&quot; Unzipping {0} to {1}&quot;.format(fname, download_dir)) fpath = os.path.join(download_dir, fname) zpath = os.path.join(download_dir, fname.split(&quot;.&quot;)[0]) with zipfile.ZipFile(fpath, &#39;r&#39;) as zip_ref: zip_ref.extractall(zpath) #click on button to download County files if verbosity &gt; 0: print(&quot; downloading county file&quot;) driver.find_element_by_partial_link_text(&quot;County Number&quot;).click() time.sleep(1) if verbosity &gt; 0: print(&quot;Done {0}&quot;.format(datetime.datetime.now())) . data_path = &quot;./data&quot; elems = os.listdir(data_path) if &quot;2020&quot; not in elems: get_individual_voter_reg_files(download_dir=data_path, verbosity=1) data_path = &quot;./data/2020&quot; if not os.path.isdir(data_path): warnings.warn(&quot;2020 data not there, Somthing wrong&quot;) else: elems_2020 = os.listdir(data_path) fname = &quot;2020.TXT&quot; fpath = os.path.join(data_path, fname) if fname not in elems_2020: warnings.warn(&quot;{0} not found&quot;.format(fname)) elif not os.path.isfile(fpath): warnings.warn(&quot;{0} not a file&quot;.format(fname)) else: fpath = os.path.join(data_path, fname) print(&quot;Detailed registerd voter data for 2020 in the file &#39;{0}&#39; in the directory {1}&quot;.format(fname, dpath)) . Detailed registerd voter data for 2020 in the file &#39;2020.TXT&#39; in the directory ./data/ . Pandas has a method for reading in fixed width data . panda.read_fwf . # the pandas.read_fwf # tried it, not working so well, need to tell it no header #for now still use the brute force method below if False: field_lens = {&#39;county_num&#39;:3, &#39;registration_num&#39;:8, &#39;election_date&#39;:8, &#39;election_type&#39;: 3, &#39;party&#39;: 2, &#39;absentee&#39;:1, &#39;provisional&#39;:1, &#39;supplemental&#39;:1} x = pd.read_fwf(fpath, widths = field_lens.values(), names=field_lens.keys()) x.head() . with open(fpath, mode=&#39;r&#39;) as fp: txt = fp.read() voter_lines = txt.split(&#39; n&#39;) minlen = min([len(l) for l in voter_lines]) maxlen = max([len(l) for l in voter_lines]) print(&quot;{0} had {1} lines, minlen {2}, maxlen {3}&quot;.format(fname, len(voter_lines), minlen, maxlen)) . 2020.TXT had 8454089 lines, minlen 0, maxlen 27 . def parse_fields(lines, field_dict): &quot;&quot;&quot; parse the fields of a line This was my original and was slow. I changed to the numpy slice version below. &quot;&quot;&quot; VoterRec = namedtuple(&quot;VoterRec&quot;, field_dict.keys() ) expected_len = sum(field_dict.values()) tups = [] def parse_fields(line, field_dict): start = 0 data = {} for k in field_dict.keys(): width = field_dict[k] elem = line[start:(start+width)] data[k] = elem start += width return data for i, line in enumerate(tqdm(lines)): if len(line) != expected_len: msg = &quot;{0} len={1}, line={2}&quot;.format(i, len(line), line) continue tup = parse_fields(line, field_dict) vr = VoterRec(**tup) tups .append(vr) return tups def parse_slices(lines, field_dict): # parse slices VoterRec = namedtuple(&quot;VoterRec&quot;, field_dict.keys() ) expected_len = sum(field_dict.values()) tups = [] def parse_slices(line, slices): return [line[s] for s in slices] widths = field_dict.values() idx = np.cumsum([0] + list(widths)) slices = [slice(i, j) for (i, j) in zip(idx[:-1], idx[1:])] for i, line in enumerate(tqdm(lines)): if len(line) != expected_len: msg = &quot;{0} len={1}, line={2}&quot;.format(i, len(line), line) continue data = parse_slices(line, slices) vr = VoterRec(*data) tups .append(vr) return tups def parse_voter_lines(lines=None, which_parser=&quot;slices&quot;): field_dict = {&#39;county_num&#39;:3, &#39;registration_num&#39;:8, &#39;election_date&#39;:8, &#39;election_type&#39;: 3, &#39;party&#39;: 2, &#39;absentee&#39;:1, &#39;provisional&#39;:1, &#39;supplemental&#39;:1} #field_widths = field_dict.values() #field_names = field_dict.keys() if which_parser == &quot;slices&quot;: tups = parse_slices(lines, field_dict) elif which_parser == &quot;fields&quot;: tups = parse_slices(lines, field_dict) else: raise (ValueError(&quot;Invalid input for &#39;which_parser&#39;= {0}, should be either &#39;slices&#39; or &#39;fields&#39;&quot;.format(which_parser))) return tups voter_tups= parse_voter_lines(lines=voter_lines, which_parser=&#39;slices&#39;) . 100%|████████████████████████████████████████████████████████████████████| 8454089/8454089 [00:20&lt;00:00, 416898.31it/s] . regdf = pd.DataFrame(voter_tups) regdf.head(2) . county_num registration_num election_date election_type party absentee provisional supplemental . 0 067 | 02788924 | 20200324 | 005 | | N | N | N | . 1 067 | 05761105 | 20200324 | 005 | | N | N | N | . ElectionTypeDict = { &#39;001&#39;:&#39;GENERAL PRIMARY&#39;, &#39;002&#39;:&#39;GENERAL PRIMARY RUN-OFF&#39;, &#39;003&#39;:&#39;GENERAL&#39;, &#39;004&#39;:&#39;GENERAL ELECTION RUNOFF&#39;, &#39;005&#39;:&#39;SPECIAL ELECTION&#39;, &#39;006&#39;:&#39;SPECIAL RUNOFF&#39;, &#39;007&#39;:&#39;NON- PARTISAN&#39;, &#39;008&#39;:&#39;SPECIAL/NON-PARTISAN&#39;, &#39;009&#39;:&#39;RECALL&#39;, &#39;010&#39;:&#39;PPP&#39; } #SPECIAL PRIMARY RUNOFF #SPECIAL PRIMARY etypedf = pd.DataFrame.from_dict(data=ElectionTypeDict, orient=&quot;index&quot;, columns=[&#39;Description&#39;]).reset_index() etypedf.columns = [&#39;election_type&#39;, &#39;description&#39;] etypedf . election_type description . 0 001 | GENERAL PRIMARY | . 1 002 | GENERAL PRIMARY RUN-OFF | . 2 003 | GENERAL | . 3 004 | GENERAL ELECTION RUNOFF | . 4 005 | SPECIAL ELECTION | . 5 006 | SPECIAL RUNOFF | . 6 007 | NON- PARTISAN | . 7 008 | SPECIAL/NON-PARTISAN | . 8 009 | RECALL | . 9 010 | PPP | . gcols = [&#39;election_date&#39;, &#39;election_type&#39;] allcols = gcols + [&#39;party&#39;] counts = regdf[allcols].groupby(by=gcols).count().reset_index() counts.columns = gcols + [&#39;count&#39;] typecount = counts.merge(etypedf, on=&#39;election_type&#39;) typecount.sort_values(by=&quot;election_date&quot;, ascending=False, inplace=True) print(&quot;# of records for each election types&quot;) print(typecount) . # of records for each election types election_date election_type count description 13 20201204 003 15 GENERAL 8 20201201 006 24773 SPECIAL RUNOFF 14 20201201 004 34248 GENERAL ELECTION RUNOFF 15 20201201 009 53 RECALL 6 20201103 005 3604 SPECIAL ELECTION 12 20201103 003 5007390 GENERAL 5 20200929 005 34812 SPECIAL ELECTION 11 20200811 002 673194 GENERAL PRIMARY RUN-OFF 4 20200609 005 280 SPECIAL ELECTION 10 20200609 001 2362615 GENERAL PRIMARY 3 20200519 005 2 SPECIAL ELECTION 2 20200324 005 310 SPECIAL ELECTION 9 20200324 010 292266 PPP 7 20200303 006 3705 SPECIAL RUNOFF 1 20200204 005 11940 SPECIAL ELECTION 0 20200128 005 4881 SPECIAL ELECTION . Questions and comments . What are these elections after 2020-11-03? Some are of a different type, but why are there 15 votes listed for the General election on 2020-12-04? . Worth writing to the GA Sec of State to ask about. . In any case, I am going to only analyze the data for . election_type == &#39;003&#39; , i.e. GENERAL | election_date= 20201103 | . etype = &#39;003&#39; edate= &#39;20201103&#39; gendf = regdf.loc[np.logical_and(regdf[&#39;election_type&#39;] == etype, regdf[&#39;election_date&#39;] == edate)] print(&quot;{0} rows for election type = &#39;{1}&#39; and election date= &#39;{2}&#39;&quot;.format(gendf.shape[0], etype, edate)) print(gendf.head(2)) . 5007390 rows for election type = &#39;003&#39; and election date= &#39;20201103&#39; county_num registration_num election_date election_type party absentee 5419 019 00591608 20201103 003 Y 5420 027 00430264 20201103 003 Y provisional supplemental 5419 N N 5420 N N . print(gendf[&#39;party&#39;].value_counts()) . 5007390 Name: party, dtype: int64 . cnames = [&#39;absentee&#39;, &#39;provisional&#39;, &#39;supplemental&#39;] print(&quot;count of votes by type&quot;) print(gendf[cnames].value_counts()) print(&quot; nPercentage of votes by type&quot;) print(np.round(100*gendf[cnames].value_counts(normalize=True), 1)) . count of votes by type absentee provisional supplemental Y N N 4018954 N N N 981654 Y N 6476 N Y 165 Y Y N 124 N Y Y 12 Y Y Y 4 N Y 1 dtype: int64 Percentage of votes by type absentee provisional supplemental Y N N 80.3 N N N 19.6 Y N 0.1 N Y 0.0 Y Y N 0.0 N Y Y 0.0 Y Y Y 0.0 N Y 0.0 dtype: float64 . More Questions and comments . From the table above we see that . over 4 million votes were &quot;absentee&quot; | 981,654 votes cast were not &quot;absentee&quot;, &quot;provisional&quot; or &quot;supplemental&quot;, so what were these? Are these in-person on the day of the election? | I don&#39;t know what &quot;provitional&quot; is, but with around 5,000 votes cast that way, not insignificant | probably can ignore &quot;supplemental&quot; | note that at least 124+12+4+1 voters cast votes in at least 2 ways. it could be more since this the other category seems to be just implied. So we don&#39;t know how many were other AND &quot;absentee&quot; or other AND &quot;supplemental&quot; | . | . | . | . cnames = [&#39;absentee&#39;, &#39;provisional&#39;, &#39;supplemental&#39;] inames = [] for name in tqdm(cnames, smoothing=0.2): print(&quot;converting &#39;{0}&#39;&quot;.format(name)) temp = gendf[name].apply(lambda x: int(x==&#39;Y&#39;)) print(&quot;{0} {1}&quot;.format(len(temp), gendf.shape[0])) iname = name + &quot;_int&quot; inames.append(iname) gendf[iname] = temp gendf[&#39;other_int&#39;] = [int(x==0) for x in gendf[inames].sum(axis=1)] inames.append(&#39;other_int&#39;) gendf[&#39;votes_int&#39;] = gendf[inames].sum(axis=1) print(gendf.iloc[:, -5:].head(2)) . 0%| | 0/3 [00:00&lt;?, ?it/s] . converting &#39;absentee&#39; . &lt;ipython-input-37-a07db72805bf&gt;:9: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy 33%|████████████████████████████ | 1/3 [00:01&lt;00:02, 1.33s/it] . 5007390 5007390 converting &#39;provisional&#39; . 67%|████████████████████████████████████████████████████████ | 2/3 [00:02&lt;00:01, 1.34s/it] . 5007390 5007390 converting &#39;supplemental&#39; . 100%|████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:04&lt;00:00, 1.34s/it] . 5007390 5007390 . . absentee_int provisional_int supplemental_int other_int votes_int 5419 1 0 0 0 1 5420 1 0 0 0 1 . &lt;ipython-input-37-a07db72805bf&gt;:10: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy &lt;ipython-input-37-a07db72805bf&gt;:12: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy . allcols = [&#39;county_num&#39;, &#39;votes_int&#39;] gcols = [&#39;county_num&#39;] gdf = gendf[allcols].groupby(by=gcols).sum().reset_index() gdf.sort_values(by=&#39;votes_int&#39;, inplace=True, ascending=False) gdf.head(10) . county_num votes_int . 59 060 | 520878 | . 66 067 | 416167 | . 32 033 | 396538 | . 43 044 | 371550 | . 27 028 | 145063 | . 24 025 | 134090 | . 57 058 | 129765 | . 74 075 | 123512 | . 30 031 | 111997 | . 68 069 | 90501 | . dpath = &quot;data&quot; fname = &quot;counties.txt&quot; fpath = os.path.join(dpath, fname) with open(fpath, mode=&quot;r&quot;) as fp: clines = fp.readlines() ctups = [] for i, line in enumerate(clines): parts = str(line).strip().split(&#39; &#39;) if len(parts) &lt; 2: msg = &quot;line &#39;{0}&#39; has {1} parts, should have &gt; 2&quot;.format(i, line) msg += &quot;line: {0}&quot;.format(line) print(msg) continue code = str(parts[0]).strip() county = &quot; &quot;.join(parts[1:]) ctups.append((code, county)) countydf = pd.DataFrame(ctups) countydf.columns = [&#39;county_num&#39;, &#39;CountyName&#39;] countydf . county_num CountyName . 0 001 | APPLING | . 1 002 | ATKINSON | . 2 003 | BACON | . 3 004 | BAKER | . 4 005 | BALDWIN | . ... ... | ... | . 154 155 | WHITFIELD | . 155 156 | WILCOX | . 156 157 | WILKES | . 157 158 | WILKINSON | . 158 159 | WORTH | . 159 rows × 2 columns . x = gdf.merge(countydf, on=&quot;county_num&quot;) x.set_index(&quot;CountyName&quot;, inplace=True) x.head() . county_num votes_int . CountyName . FULTON 060 | 520878 | . GWINNETT 067 | 416167 | . COBB 033 | 396538 | . DEKALB 044 | 371550 | . CHEROKEE 028 | 145063 | . Merge back with voters and vote counts . y = presCombo.join(x) y[&#39;voter_mismatch&#39;] = y[&#39;Votes&#39;] - y[&#39;votes_int&#39;] y[&#39;abs_mismatch&#39;] = y[&#39;voter_mismatch&#39;].apply(lambda x: abs(x)) y.sort_values(by=&#39;abs_mismatch&#39;, ascending=False, inplace=True) y.head(10) . Votes TotalVoters PctVoted county_num votes_int voter_mismatch abs_mismatch . CountyName . FULTON 524659 | 808742 | 64.873 | 060 | 520878 | 3781 | 3781 | . COBB 393746 | 537659 | 73.233 | 033 | 396538 | -2792 | 2792 | . GWINNETT 413865 | 582917 | 70.999 | 067 | 416167 | -2302 | 2302 | . STEPHENS 11885 | 18078 | 65.743 | 127 | 10956 | 929 | 929 | . SPALDING 30116 | 46088 | 65.345 | 126 | 29234 | 882 | 882 | . HENRY 122742 | 172241 | 71.262 | 075 | 123512 | -770 | 770 | . DEKALB 370804 | 547802 | 67.689 | 044 | 371550 | -746 | 746 | . CHATHAM 133420 | 202999 | 65.724 | 025 | 134090 | -670 | 670 | . FORSYTH 129305 | 164279 | 78.711 | 058 | 129765 | -460 | 460 | . CLARKE 51333 | 76848 | 66.798 | 029 | 51752 | -419 | 419 | . print() pos_sum = sum([x if x &gt; 0 else 0 for x in y[&#39;voter_mismatch&#39;].values]) neg_sum = sum([-x if x &lt; 0 else 0 for x in y[&#39;voter_mismatch&#39;].values]) print(&quot;pos_sum= {0}, neg_sum= {1}, abs_sum= {2}, net_sum= {3}&quot;.format(pos_sum, neg_sum, y[&#39;abs_mismatch&#39;].sum(), y[&#39;voter_mismatch&#39;].sum())) . pos_sum= 7174, neg_sum= 16227, abs_sum= 23401, net_sum= -9053 . y[&#39;pct_voters2&#39;] = np.round(100 * y[&#39;votes_int&#39;]/y[&#39;TotalVoters&#39;], 2) y.head() . Votes TotalVoters PctVoted county_num votes_int voter_mismatch abs_mismatch pct_voters2 . CountyName . FULTON 524659 | 808742 | 64.873 | 060 | 520878 | 3781 | 3781 | 64.41 | . COBB 393746 | 537659 | 73.233 | 033 | 396538 | -2792 | 2792 | 73.75 | . GWINNETT 413865 | 582917 | 70.999 | 067 | 416167 | -2302 | 2302 | 71.39 | . STEPHENS 11885 | 18078 | 65.743 | 127 | 10956 | 929 | 929 | 60.60 | . SPALDING 30116 | 46088 | 65.345 | 126 | 29234 | 882 | 882 | 63.43 | . choices = (&quot;Trump&quot;, &quot;Biden&quot;) choice_dfs = [None]*len(choices) for i, choice in enumerate(choices): tempdf = presdf.loc[presdf[&quot;Choice&quot;].str.contains(choice), [&quot;CountyName&quot;, &quot;Votes&quot;]].groupby([&quot;CountyName&quot;]).sum() tempdf.rename(columns={&quot;Votes&quot;:choice}, inplace=True) choice_dfs[i] = tempdf widedf = choice_dfs[0].merge(choice_dfs[1], on=&quot;CountyName&quot;) widedf[&#39;BidenMargin&#39;] = widedf[&#39;Biden&#39;] - widedf[&#39;Trump&#39;] widedf.sort_values(by=&quot;BidenMargin&quot;, ascending=&quot;False&quot;, inplace=True) widedf.reset_index(inplace=True) widedf[&quot;sign&quot;] = [0 if y &gt; 0 else 1 for y in widedf[&#39;BidenMargin&#39;]] widedf[&quot;Both&quot;] = widedf[&quot;Trump&quot;] + widedf[&quot;Biden&quot;] widedf . CountyName Trump Biden BidenMargin sign Both . 0 CHEROKEE | 99587 | 42794 | -56793 | 1 | 142381 | . 1 FORSYTH | 85122 | 42203 | -42919 | 1 | 127325 | . 2 HALL | 64170 | 25031 | -39139 | 1 | 89201 | . 3 COWETA | 51501 | 24210 | -27291 | 1 | 75711 | . 4 BARTOW | 37674 | 12092 | -25582 | 1 | 49766 | . ... ... | ... | ... | ... | ... | ... | . 154 COBB | 165459 | 221846 | 56387 | 0 | 387305 | . 155 GWINNETT | 166413 | 241827 | 75414 | 0 | 408240 | . 156 CLAYTON | 15813 | 95476 | 79663 | 0 | 111289 | . 157 FULTON | 137240 | 381144 | 243904 | 0 | 518384 | . 158 DEKALB | 58373 | 308227 | 249854 | 0 | 366600 | . 159 rows × 6 columns . x = widedf[[&#39;CountyName&#39;, &#39;Both&#39;]].groupby(by=&quot;CountyName&quot;).sum() x.sort_values(by=&quot;Both&quot;, inplace=True) county_cat = pd.Categorical(x.index, categories=x.index) county_cat cat_df = pd.DataFrame({&quot;CountyName&quot;: x.index, &quot;CountyCat&quot;: county_cat}) cat_df z = widedf.merge(cat_df, on=&quot;CountyName&quot;) z . CountyName Trump Biden BidenMargin sign Both CountyCat . 0 CHEROKEE | 99587 | 42794 | -56793 | 1 | 142381 | CHEROKEE | . 1 FORSYTH | 85122 | 42203 | -42919 | 1 | 127325 | FORSYTH | . 2 HALL | 64170 | 25031 | -39139 | 1 | 89201 | HALL | . 3 COWETA | 51501 | 24210 | -27291 | 1 | 75711 | COWETA | . 4 BARTOW | 37674 | 12092 | -25582 | 1 | 49766 | BARTOW | . ... ... | ... | ... | ... | ... | ... | ... | . 154 COBB | 165459 | 221846 | 56387 | 0 | 387305 | COBB | . 155 GWINNETT | 166413 | 241827 | 75414 | 0 | 408240 | GWINNETT | . 156 CLAYTON | 15813 | 95476 | 79663 | 0 | 111289 | CLAYTON | . 157 FULTON | 137240 | 381144 | 243904 | 0 | 518384 | FULTON | . 158 DEKALB | 58373 | 308227 | 249854 | 0 | 366600 | DEKALB | . 159 rows × 7 columns . z.dtypes . CountyName object Trump int64 Biden int64 BidenMargin int64 sign int64 Both int64 CountyCat category dtype: object . import plotnine as pn from plotnine import ggplot, geom_point, geom_bar, aes, stat_smooth, facet_wrap pn.options.figure_size = (10, 30) (ggplot(z) + pn.coord_flip() + geom_bar(aes(x=&#39;CountyCat&#39;, y=&#39;BidenMargin&#39;,color=&quot;sign&quot;), stat=&#39;identity&#39;)) . &lt;ggplot: (166458227821)&gt; . . &lt;ggplot: (149148345067)&gt; . &lt;/div&gt; | | | | | | | | | | | | . .",
            "url": "https://jhmuller.github.io/ga-votes-2020-11-03/2020/12/27/ga-votes.html",
            "relUrl": "/2020/12/27/ga-votes.html",
            "date": " • Dec 27, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "&lt;/p&gt; . Analysis of data on the elections in Georgia 2020-11-03 . &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt; . Python imports . and defining a few utility functions . whoami(): returns the name of the calling function | . . &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; import os import sys import inspect import warnings import datetime import time import pdb import xml import re import openpyxl from collections import namedtuple from collections import OrderedDict import pandas as pd import numpy as np import matplotlib as mpl import matplotlib.pyplot as plt import plotnine from tqdm import tqdm import collections import zipfile import selenium from selenium import webdriver from selenium.webdriver.support.ui import Select def whoami(): return sys._getframe(1).f_code.co_name now = datetime.datetime.now now() . datetime.datetime(2020, 12, 27, 2, 15, 38, 341027) . &lt;/p&gt; . Selenium setup . for automating control of a browser, used mainly to automate downloads . &lt;/span&gt;&lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; def chrome_options_download_dir(ddir): if not os.path.isdir(ddir): os.mkdir(ddir) prefs = {&quot;download.default_directory&quot; : os.path.abspath(ddir)} options = webdriver.ChromeOptions() options.add_experimental_option(&quot;prefs&quot;,prefs) options.add_argument(&quot;download.default_directory=&quot;+os.path.abspath(ddir)) return options . &lt;/p&gt; . Results or vote count data . Data Source is . https://results.enr.clarityelections.com/GA/105369/web.264614/#/summary . Look on the right-hand side of the page for a &quot;Reports&quot; section. There should be some download icons. If you click on those you can get the data. . I chose to use the XML version of the data. Maybe not the best choice but I seem to have made it work. . Data on election results, that is votes cast for each candidate. . Data is broken down by . Contest, e.g. President, one of the Senate races and many more, | County | Type of vote (Absentee, Early in-person, Election day in-person, Provisional) | . Other possible sources for the senate race . www.nbcnews.com/politics/2020-special-elections/georgia-senate-results . https://results.enr.clarityelections.com/GA/105369/web.264614/#/detail/10000 . . &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ToDo: write some code to automaticly download the data file if it is not present locally . fpath = &quot;./data/detailxml/detail.xml&quot; import xml.etree.ElementTree as et def node_msg(node, pref= &#39;&#39;, tag=True, attribs=None): if attribs is None: attribs = [] if isinstance(attribs, str): attribs = [attribs] msg = &quot;&quot; msg += &quot;{0}{1} tag: {2}&quot;.format(pref,node, node.tag) pref = pref+&quot; &quot; for at in attribs: atval = None if at in node.attrib.keys(): atval = node.attrib[at] msg += &quot; n{0}{1} &#39;{2}&#39;&quot;.format(pref, at, atval) return msg . CountyVoteTup = collections.namedtuple(&quot;CountyVoteTup&quot;,[&#39;CountyName&#39;, &#39;Votes&#39;]) VoteTypeTup = collections.namedtuple(&quot;VoteTypeTup&quot;, [&#39;CountyName&#39;, &#39;Votes&#39;, &#39;VoteType&#39;]) ChoiceTup = collections.namedtuple(&quot;ChoiceTup&quot;, [&#39;CountyName&#39;, &#39;Votes&#39;, &#39;VoteType&#39;,&#39;Choice&#39;]) ContestTup = collections.namedtuple(&quot;ContestTup&quot;, [&#39;CountyName&#39;, &#39;Votes&#39;, &#39;VoteType&#39;,&#39;Choice&#39;, &#39;Contest&#39;]) def doCountyVote(node): county_name = node.attrib[&#39;name&#39;] votes = int(node.attrib[&#39;votes&#39;]) cv_tup = CountyVoteTup(county_name, votes) return cv_tup def doVoteType(root_node, pref=&#39;&#39;, verbosity=0): if verbosity &gt; 0: print(node_msg(root_node, pref=pref+&#39; &#39;, attribs=&#39;text&#39;)) VoteTypeName = root_node.attrib[&#39;name&#39;] counties = [] votetype_tups = [] for node in root_node: if node.tag == &quot;County&quot;: cv = doCountyVote(node) vt = VoteTypeTup(*cv, VoteTypeName) votetype_tups.append(vt) counties.append(cv) res = pd.DataFrame(counties) res.set_index(&quot;CountyName&quot;, inplace=True) res.rename(columns={&quot;Votes&quot;:VoteTypeName}, inplace=True) return (res, votetype_tups) def doChoice(root_node, pref=&#39;&#39;, verbosity=0): if verbosity &gt; 0: print(node_msg(root_node, pref=pref+&#39; &#39;, attribs=&#39;text&#39;)) ChoiceText = root_node.attrib[&#39;text&#39;] res = None choice_tups = [] for node in root_node: if node.tag == &quot;VoteType&quot;: df, vts = doVoteType(node) for vt in vts: choice = ChoiceTup(*vt, ChoiceText) choice_tups.append(choice) if res is None: res = df else: res = res.join(df, how=&quot;left&quot;) res[&#39;Total&#39;] = res.sum(axis=1) res.columns = pd.MultiIndex.from_product([[ChoiceText], res.columns]) return res, choice_tups def doContest(root_node, pref=&#39;&#39;, verbosity=0): if verbosity &gt; 0: print(node_msg(root_node, pref=pref+&#39; &#39;, attribs=&#39;text&#39;)) res = None ContestText = root_node.attrib[&#39;text&#39;] contest_tups = [] for node in root_node: if node.tag == &quot;Choice&quot;: choice, tups = doChoice(node) for tup in tups: contest_tup = ContestTup(*tup, ContestText) contest_tups.append(contest_tup) if res is None: res = choice else: res = res.join(choice, how=&#39;left&#39;) return (res, contest_tups) . xtree = et.parse(fpath) senate_races = [] xroot = xtree.getroot() tups = [] contests = {} for i, node in enumerate(tqdm(xroot)): if node.tag == &#39;Contest&#39;: if &#39;text&#39; in node.attrib.keys(): if &#39;US Senate&#39; in node.attrib[&#39;text&#39;] or &#39;President&#39; in node.attrib[&#39;text&#39;] : contest = node.attrib[&#39;text&#39;] res, contest_tups = doContest(node, pref=&#39;&#39;) tups.extend(contest_tups) print(contest) contests[contest] = res contests.keys() contestsdf = pd.DataFrame(tups) contestsdf[&#39;CountyName&#39;] = contestsdf[&#39;CountyName&#39;].apply(lambda x: x.upper()) contestsdf.groupby(by=&quot;Contest&quot;).sum() . 0%| | 0/303 [00:00&lt;?, ?it/s] . President of the United States US Senate (Perdue) . 100%|███████████████████████████████████████████████████████████████████████████████| 303/303 [00:00&lt;00:00, 953.80it/s] . US Senate (Loeffler) - Special . . Votes . Contest . President of the United States 4998482 | . US Senate (Loeffler) - Special 4914361 | . US Senate (Perdue) 4952175 | . print(contestsdf[&#39;VoteType&#39;].unique()) contestsdf.head(2) . [&#39;Election Day Votes&#39; &#39;Absentee by Mail Votes&#39; &#39;Advanced Voting Votes&#39; &#39;Provisional Votes&#39;] . CountyName Votes VoteType Choice Contest . 0 APPLING | 1753 | Election Day Votes | Donald J. Trump (I) (Rep) | President of the United States | . 1 ATKINSON | 716 | Election Day Votes | Donald J. Trump (I) (Rep) | President of the United States | . grp_contests = contestsdf.groupby(by=[&#39;VoteType&#39;,&#39;Choice&#39;, &#39;Contest&#39;]).sum() grp_contests.sort_values(by=[&#39;Contest&#39;, &#39;VoteType&#39;,&#39;Choice&#39;],inplace=True) grp_contests.reset_index(inplace=True) grp_contests.head() . VoteType Choice Contest Votes . 0 Absentee by Mail Votes | Donald J. Trump (I) (Rep) | President of the United States | 451157 | . 1 Absentee by Mail Votes | Jo Jorgensen (Lib) | President of the United States | 16057 | . 2 Absentee by Mail Votes | Joseph R. Biden (Dem) | President of the United States | 849729 | . 3 Advanced Voting Votes | Donald J. Trump (I) (Rep) | President of the United States | 1419161 | . 4 Advanced Voting Votes | Jo Jorgensen (Lib) | President of the United States | 25209 | . grp_contests.loc[grp_contests[&#39;Contest&#39;].str.contains(&#39;President&#39;),] grp_contests.sort_values(by=&quot;Votes&quot;, inplace=True) grp_contests.loc[grp_contests[&#39;Contest&#39;].str.contains(&#39;Loeffler&#39;),].tail(10) . VoteType Choice Contest Votes . 37 Advanced Voting Votes | Deborah Jackson (Dem) | US Senate (Loeffler) - Special | 173820 | . 19 Absentee by Mail Votes | Doug Collins (Rep) | US Senate (Loeffler) - Special | 185300 | . 68 Election Day Votes | Raphael Warnock (Dem) | US Senate (Loeffler) - Special | 205110 | . 59 Election Day Votes | Doug Collins (Rep) | US Senate (Loeffler) - Special | 211902 | . 25 Absentee by Mail Votes | Kelly Loeffler (I) (Rep) | US Senate (Loeffler) - Special | 249090 | . 65 Election Day Votes | Kelly Loeffler (I) (Rep) | US Senate (Loeffler) - Special | 298209 | . 39 Advanced Voting Votes | Doug Collins (Rep) | US Senate (Loeffler) - Special | 581871 | . 28 Absentee by Mail Votes | Raphael Warnock (Dem) | US Senate (Loeffler) - Special | 601522 | . 45 Advanced Voting Votes | Kelly Loeffler (I) (Rep) | US Senate (Loeffler) - Special | 724577 | . 48 Advanced Voting Votes | Raphael Warnock (Dem) | US Senate (Loeffler) - Special | 807005 | . presdf = contestsdf[contestsdf[&#39;Contest&#39;].str.contains(&quot;President&quot;)] presByCounty = presdf[[&quot;CountyName&quot;, &quot;Votes&quot;]].groupby(&quot;CountyName&quot;).sum() presByCounty.sort_values(by=&quot;Votes&quot;, ascending=False, inplace=True) presByCounty.head(4) . Votes . CountyName . FULTON 524659 | . GWINNETT 413865 | . COBB 393746 | . DEKALB 370804 | . loefflerdf = contestsdf[contestsdf[&#39;Contest&#39;].str.contains(&quot;Loeffler&quot;)] purduedf = contestsdf[contestsdf[&#39;Contest&#39;].str.contains(&quot;Loeffler&quot;)] if True: gdf = presdf[[&#39;VoteType&#39;, &#39;Votes&#39;, &#39;Contest&#39;]].groupby(&#39;VoteType&#39;).sum() gdf[&quot;Pct&quot;] = 100*np.round(gdf / gdf.sum(),3) print(&quot;Votes counted by Vote Type&quot;) print(gdf) print(&quot;&quot;) print(&quot;Total votes counted (millions): {0}&quot;.format(gdf[&quot;Votes&quot;].sum()/10.0**6)) . Votes counted by Vote Type Votes Pct VoteType Absentee by Mail Votes 1316943 26.3 Advanced Voting Votes 2694879 53.9 Election Day Votes 975540 19.5 Provisional Votes 11120 0.2 Total votes counted (millions): 4.998482 . votesByCounty = contestsdf[[&quot;CountyName&quot;, &quot;Votes&quot;]].groupby(&quot;CountyName&quot;).sum() votesByCounty.sort_values(by=&quot;Votes&quot;, ascending=False, inplace=True) votesByCounty.head(4) . Votes . CountyName . FULTON 1563044 | . GWINNETT 1227786 | . COBB 1173481 | . DEKALB 1105580 | . &lt;/p&gt; . Data on registered voters . Source is . https://sos.ga.gov/index.php/Elections/voter_registration_statistics . I choose the most granular, that is, by . County, | Age, | Race | . Right now not doing anything with the Age or Race data, just aggregating to County. . . &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; To Do: write code to automaticly download the data if not present locally . if True: dpath = &quot;./data/&quot; voterfile = &quot;Active_Voters_by_Race_Gender_and_Age_as_of_November_1_2020.xlsx&quot; voterpath = os.path.join(dpath, voterfile) if not os.path.isdir(dpath): warnings.warn(&quot;{0} is not a directory&quot;.format(dpath)) if not os.path.isfile(voterpath): warnings.warn(&quot;No file {0} in dir {1}&quot;.format(voterfile, dpath)) with open(voterpath) as vp: racedf = pd.read_excel(voterpath, nrows=7, engine=&#39;openpyxl&#39;).iloc[:,:2] racedf.columns = [&quot;RaceCode&quot;, &quot;RaceDescription&quot;] racedf[&quot;RaceCode&quot;] = racedf[&quot;RaceCode&quot;].apply(lambda x: x[:-2]) racedf.set_index(&quot;RaceCode&quot;, inplace=True) race = racedf.squeeze() race_dict = race.to_dict() print(race_dict) . {&#39;AI&#39;: &#39;AMERICAN INDIAN OR ALASKAN NATIVE&#39;, &#39;AP&#39;: &#39;ASIAN OR PACIFIC ISLANDER&#39;, &#39;BH&#39;: &#39;BLACK NOT OF HISPANIC ORIGIN&#39;, &#39;HP&#39;: &#39;HISPANIC&#39;, &#39;WH&#39;: &#39;WHITE NOT OF HISPANIC ORIGIN&#39;, &#39;OT&#39;: &#39;OTHER&#39;, &#39;UK&#39;: &#39;UNKNOWN&#39;} . votersdf = pd.read_excel(voterpath, skiprows=8, engine=&#39;openpyxl&#39;) if votersdf.columns[-1] != &quot;TOTAL VOTERS&quot;: votersdf = votersdf.iloc[:,:-1] colnames = [re.sub(&quot; s+&quot;, &quot;-&quot;, c.strip()) for c in votersdf.columns] votersdf.columns = colnames votersdf.drop(&#39;COUNTY-ID&#39;, axis=1, inplace=True) votersdf = votersdf.loc[votersdf[&quot;COUNTY-NAME&quot;].notna()] colname_parts = [c.split(&quot;-&quot;) for c in votersdf.columns] newnames = [] for parts in colname_parts: newparts = parts if parts[0] in race_dict.keys(): newparts = [race_dict[parts[0]].split(&quot; &quot;)[0]] + parts[1:] newnames.append(&quot;-&quot;.join(newparts)) votersdf.columns = newnames votersdf.rename(columns={&quot;COUNTY-NAME&quot;:&quot;CountyName&quot;, &#39;TOTAL-VOTERS&#39;:&#39;TotalVoters&#39;}, inplace=True) votersdf[&#39;CountyName&#39;] = votersdf[&#39;CountyName&#39;].apply(lambda x: x.upper()) print(&quot;{0} rows {1} cols&quot;.format(*votersdf.shape)) votersdf.head(2) . 1594 rows 24 cols . CountyName VOTER-AGE-RANGE AMERICAN-MALE-VOTERS AMERICAN-FEMALE-VOTERS AMERICAN-UNKNOWN-VOTERS ASIAN-MALE-VOTERS ASIAN-FEMALE-VOTERS ASIAN-UNKNOWN-VOTERS BLACK-MALE-VOTERS BLACK-FEMALE-VOTERS ... WHITE-MALE-VOTERS WHITE-FEMALE-VOTERS WHITE-UNKNOWN-VOTERS OTHER-MALE-VOTERS OTHER-FEMALE-VOTERS OTHER-UNKNOWN-VOTERS UNKNOWN-MALE-VOTERS UNKNOWN-FEMALE-VOTERS UNKNOWN-UNKNOWN-VOTERS TotalVoters . 0 APPLING | 18-24 | 2 | 1 | 0 | 3 | 5 | 0 | 120 | 110 | ... | 436 | 429 | 1 | 5 | 19 | 0 | 95 | 60 | 2 | 1374 | . 1 APPLING | 25-29 | 0 | 0 | 0 | 4 | 1 | 0 | 81 | 89 | ... | 282 | 298 | 1 | 3 | 7 | 0 | 38 | 30 | 0 | 866 | . 2 rows × 24 columns . gcols = [&quot;CountyName&quot;] votersByCounty = votersdf[[&quot;CountyName&quot;, &#39;TotalVoters&#39; ]].groupby(by=gcols).sum() votersByCounty.sort_values(by=&quot;TotalVoters&quot;, ascending=False, inplace=True) votersByCounty.dtypes . TotalVoters int64 dtype: object . &lt;/p&gt; . Combining Voters and Votes by County . &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; print(presByCounty.index.values[:10]) print(votersByCounty.index.values[:10]) . [&#39;FULTON&#39; &#39;GWINNETT&#39; &#39;COBB&#39; &#39;DEKALB&#39; &#39;CHEROKEE&#39; &#39;CHATHAM&#39; &#39;FORSYTH&#39; &#39;HENRY&#39; &#39;CLAYTON&#39; &#39;HALL&#39;] [&#39;FULTON&#39; &#39;GWINNETT&#39; &#39;DEKALB&#39; &#39;COBB&#39; &#39;CHATHAM&#39; &#39;CLAYTON&#39; &#39;CHEROKEE&#39; &#39;HENRY&#39; &#39;FORSYTH&#39; &#39;RICHMOND&#39;] . presCombo = presByCounty.join(votersByCounty) presCombo[&quot;PctVoted&quot;] = np.round(100*presCombo[&#39;Votes&#39;] / presCombo[&#39;TotalVoters&#39;],3) presCombo.sort_values(by=&quot;Votes&quot;, inplace=True) presCombo.tail(10) . Votes TotalVoters PctVoted . CountyName . HALL 90523 | 128535 | 70.427 | . CLAYTON 112344 | 194338 | 57.809 | . HENRY 122742 | 172241 | 71.262 | . FORSYTH 129305 | 164279 | 78.711 | . CHATHAM 133420 | 202999 | 65.724 | . CHEROKEE 144830 | 190605 | 75.984 | . DEKALB 370804 | 547802 | 67.689 | . COBB 393746 | 537659 | 73.233 | . GWINNETT 413865 | 582917 | 70.999 | . FULTON 524659 | 808742 | 64.873 | . &lt;/p&gt; . Voter Registration . Source is . https://elections.sos.ga.gov/Elections/voterhistory.do . According to the site this is data on &quot;credit for voting by qualified electors&quot; . I believe there is a record for each registered voter. . According to the Voter History File Layout at the bottom, the fields in each line are as follows: 1 County Number: 3 characters 2 Registration Number: 8 characters 3 Election Date: 8 characters 4 Election Type: 3 characters, see the web page 5 Party: 2 characters 6 Absentee: 1 character (&#39;Y&#39; or &#39;N&#39;) 7 Provisional: 1 character (&#39;Y&#39; or &#39;N&#39;) 8 Supplemental: 1 character (&#39;Y&#39; of &#39;N&#39;) . I&#39;m not sure what &quot;Registration Number&quot; is but I am guessing it is tied to a specific voter. The documntation for &quot;Election Type&quot; lists the following possibilities: . 001 GENERAL PRIMARY 002 GENERAL PRIMARY RUN-OFF 003 GENERAL 004 GENERAL ELECTION RUNOFF 005 SPECIAL ELECTION 006 SPECIAL RUNOFF 007 NON- PARTISAN 008 SPECIAL/NON-PARTISAN 009 RECALL 010 PPP SPECIAL PRIMARY RUNOFF SPECIAL PRIMARY &lt;/ul&gt;The documentation gives the following possibilities for &quot;Party&quot; . D Democratic | R Republican | NP Non-Partisan | . . &lt;/span&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; def get_individual_voter_reg_files(download_dir, verbosity=0): if verbosity &gt; 0: print(&quot;{0} download_dir= {1}, &lt;{2}&gt;&quot;.format(whoami(), download_dir, datetime.datetime.now())) options = chrome_options_download_dir(download_dir) chromedriver_path = os.path.join(&#39;chromedriver.exe&#39;) driver = webdriver.Chrome(executable_path=chromedriver_path, options=options) url = &quot;https://elections.sos.ga.gov/Elections/voterhistory.do&quot; driver.get(url) # find year selector and select 2020 year_select = Select(driver.find_element_by_id(&quot;nbElecYear&quot;)) year_select.select_by_value(&quot;2020&quot;) # find the election selector and select 11/03/2020 elec_select = Select(driver.find_element_by_id(&quot;idElection&quot;)) elec_select.select_by_visible_text(&quot;11/03/2020 - NOVEMBER 3, 2020 GENERAL/SPECIAL ELECTION&quot;) # find the elecCat selector and select StaeWide cat_select = Select(driver.find_element_by_id(&quot;cdElecCat&quot;)) cat_select.select_by_visible_text(&quot;STATE WIDE&quot;) time.sleep(0.5) # click on button to download 2020 file if verbosity &gt; 0: print(&quot; downloading 2020 file&quot;) driver.find_element_by_partial_link_text(&quot;2020&quot;).click() time.sleep(0.5) fname = &quot;2020.zip&quot; max_wait_secs = 9 file_there = False start_dt = datetime.datetime.now() if verbosity &gt; 0: print(&quot;looking for file {0} in {1}&quot;.format(fname, download_dir)) while not file_there: files = os.listdir(download_dir) if fname in files: if verbosity &gt; 0: print(&quot; Found it &#39;{0}&#39;&quot;.format(fname)) file_there = True break cur_dt = datetime.datetime.now() if verbosity &gt; 0: print(&quot; Not there yet &lt;{0}&gt;&quot;.format(cur_dt)) time.sleep(1) if (cur_dt - start_dt).total_seconds() &gt; max_wait_secs: if verbosity &gt; 0: print(&quot;{0} not in {1}, can&#39;t wait any longer&quot;.format(fname, download_dir)) break if file_there: if verbosity &gt; 0: print(&quot; Unzipping {0} to {1}&quot;.format(fname, download_dir)) fpath = os.path.join(download_dir, fname) zpath = os.path.join(download_dir, fname.split(&quot;.&quot;)[0]) with zipfile.ZipFile(fpath, &#39;r&#39;) as zip_ref: zip_ref.extractall(zpath) #click on button to download County files if verbosity &gt; 0: print(&quot; downloading county file&quot;) driver.find_element_by_partial_link_text(&quot;County Number&quot;).click() time.sleep(1) if verbosity &gt; 0: print(&quot;Done {0}&quot;.format(datetime.datetime.now())) . data_path = &quot;./data&quot; elems = os.listdir(data_path) if &quot;2020&quot; not in elems: get_individual_voter_reg_files(download_dir=data_path, verbosity=1) data_path = &quot;./data/2020&quot; if not os.path.isdir(data_path): warnings.warn(&quot;2020 data not there, Somthing wrong&quot;) else: elems_2020 = os.listdir(data_path) fname = &quot;2020.TXT&quot; fpath = os.path.join(data_path, fname) if fname not in elems_2020: warnings.warn(&quot;{0} not found&quot;.format(fname)) elif not os.path.isfile(fpath): warnings.warn(&quot;{0} not a file&quot;.format(fname)) else: fpath = os.path.join(data_path, fname) print(&quot;Detailed registerd voter data for 2020 in the file &#39;{0}&#39; in the directory {1}&quot;.format(fname, dpath)) . Detailed registerd voter data for 2020 in the file &#39;2020.TXT&#39; in the directory ./data/ . Pandas has a method for reading in fixed width data . panda.read_fwf . # the pandas.read_fwf # tried it, not working so well, need to tell it no header #for now still use the brute force method below if False: field_lens = {&#39;county_num&#39;:3, &#39;registration_num&#39;:8, &#39;election_date&#39;:8, &#39;election_type&#39;: 3, &#39;party&#39;: 2, &#39;absentee&#39;:1, &#39;provisional&#39;:1, &#39;supplemental&#39;:1} x = pd.read_fwf(fpath, widths = field_lens.values(), names=field_lens.keys()) x.head() . with open(fpath, mode=&#39;r&#39;) as fp: txt = fp.read() voter_lines = txt.split(&#39; n&#39;) minlen = min([len(l) for l in voter_lines]) maxlen = max([len(l) for l in voter_lines]) print(&quot;{0} had {1} lines, minlen {2}, maxlen {3}&quot;.format(fname, len(voter_lines), minlen, maxlen)) . 2020.TXT had 8454089 lines, minlen 0, maxlen 27 . def parse_fields(lines, field_dict): &quot;&quot;&quot; parse the fields of a line This was my original and was slow. I changed to the numpy slice version below. &quot;&quot;&quot; VoterRec = namedtuple(&quot;VoterRec&quot;, field_dict.keys() ) expected_len = sum(field_dict.values()) tups = [] def parse_fields(line, field_dict): start = 0 data = {} for k in field_dict.keys(): width = field_dict[k] elem = line[start:(start+width)] data[k] = elem start += width return data for i, line in enumerate(tqdm(lines)): if len(line) != expected_len: msg = &quot;{0} len={1}, line={2}&quot;.format(i, len(line), line) continue tup = parse_fields(line, field_dict) vr = VoterRec(**tup) tups .append(vr) return tups def parse_slices(lines, field_dict): # parse slices VoterRec = namedtuple(&quot;VoterRec&quot;, field_dict.keys() ) expected_len = sum(field_dict.values()) tups = [] def parse_slices(line, slices): return [line[s] for s in slices] widths = field_dict.values() idx = np.cumsum([0] + list(widths)) slices = [slice(i, j) for (i, j) in zip(idx[:-1], idx[1:])] for i, line in enumerate(tqdm(lines)): if len(line) != expected_len: msg = &quot;{0} len={1}, line={2}&quot;.format(i, len(line), line) continue data = parse_slices(line, slices) vr = VoterRec(*data) tups .append(vr) return tups def parse_voter_lines(lines=None, which_parser=&quot;slices&quot;): field_dict = {&#39;county_num&#39;:3, &#39;registration_num&#39;:8, &#39;election_date&#39;:8, &#39;election_type&#39;: 3, &#39;party&#39;: 2, &#39;absentee&#39;:1, &#39;provisional&#39;:1, &#39;supplemental&#39;:1} #field_widths = field_dict.values() #field_names = field_dict.keys() if which_parser == &quot;slices&quot;: tups = parse_slices(lines, field_dict) elif which_parser == &quot;fields&quot;: tups = parse_slices(lines, field_dict) else: raise (ValueError(&quot;Invalid input for &#39;which_parser&#39;= {0}, should be either &#39;slices&#39; or &#39;fields&#39;&quot;.format(which_parser))) return tups voter_tups= parse_voter_lines(lines=voter_lines, which_parser=&#39;slices&#39;) . 100%|████████████████████████████████████████████████████████████████████| 8454089/8454089 [00:20&lt;00:00, 416898.31it/s] . regdf = pd.DataFrame(voter_tups) regdf.head(2) . county_num registration_num election_date election_type party absentee provisional supplemental . 0 067 | 02788924 | 20200324 | 005 | | N | N | N | . 1 067 | 05761105 | 20200324 | 005 | | N | N | N | . ElectionTypeDict = { &#39;001&#39;:&#39;GENERAL PRIMARY&#39;, &#39;002&#39;:&#39;GENERAL PRIMARY RUN-OFF&#39;, &#39;003&#39;:&#39;GENERAL&#39;, &#39;004&#39;:&#39;GENERAL ELECTION RUNOFF&#39;, &#39;005&#39;:&#39;SPECIAL ELECTION&#39;, &#39;006&#39;:&#39;SPECIAL RUNOFF&#39;, &#39;007&#39;:&#39;NON- PARTISAN&#39;, &#39;008&#39;:&#39;SPECIAL/NON-PARTISAN&#39;, &#39;009&#39;:&#39;RECALL&#39;, &#39;010&#39;:&#39;PPP&#39; } #SPECIAL PRIMARY RUNOFF #SPECIAL PRIMARY etypedf = pd.DataFrame.from_dict(data=ElectionTypeDict, orient=&quot;index&quot;, columns=[&#39;Description&#39;]).reset_index() etypedf.columns = [&#39;election_type&#39;, &#39;description&#39;] etypedf . election_type description . 0 001 | GENERAL PRIMARY | . 1 002 | GENERAL PRIMARY RUN-OFF | . 2 003 | GENERAL | . 3 004 | GENERAL ELECTION RUNOFF | . 4 005 | SPECIAL ELECTION | . 5 006 | SPECIAL RUNOFF | . 6 007 | NON- PARTISAN | . 7 008 | SPECIAL/NON-PARTISAN | . 8 009 | RECALL | . 9 010 | PPP | . gcols = [&#39;election_date&#39;, &#39;election_type&#39;] allcols = gcols + [&#39;party&#39;] counts = regdf[allcols].groupby(by=gcols).count().reset_index() counts.columns = gcols + [&#39;count&#39;] typecount = counts.merge(etypedf, on=&#39;election_type&#39;) typecount.sort_values(by=&quot;election_date&quot;, ascending=False, inplace=True) print(&quot;# of records for each election types&quot;) print(typecount) . # of records for each election types election_date election_type count description 13 20201204 003 15 GENERAL 8 20201201 006 24773 SPECIAL RUNOFF 14 20201201 004 34248 GENERAL ELECTION RUNOFF 15 20201201 009 53 RECALL 6 20201103 005 3604 SPECIAL ELECTION 12 20201103 003 5007390 GENERAL 5 20200929 005 34812 SPECIAL ELECTION 11 20200811 002 673194 GENERAL PRIMARY RUN-OFF 4 20200609 005 280 SPECIAL ELECTION 10 20200609 001 2362615 GENERAL PRIMARY 3 20200519 005 2 SPECIAL ELECTION 2 20200324 005 310 SPECIAL ELECTION 9 20200324 010 292266 PPP 7 20200303 006 3705 SPECIAL RUNOFF 1 20200204 005 11940 SPECIAL ELECTION 0 20200128 005 4881 SPECIAL ELECTION . Questions and comments . What are these elections after 2020-11-03? Some are of a different type, but why are there 15 votes listed for the General election on 2020-12-04? . Worth writing to the GA Sec of State to ask about. . In any case, I am going to only analyze the data for . election_type == &#39;003&#39; , i.e. GENERAL | election_date= 20201103 | . etype = &#39;003&#39; edate= &#39;20201103&#39; gendf = regdf.loc[np.logical_and(regdf[&#39;election_type&#39;] == etype, regdf[&#39;election_date&#39;] == edate)] print(&quot;{0} rows for election type = &#39;{1}&#39; and election date= &#39;{2}&#39;&quot;.format(gendf.shape[0], etype, edate)) print(gendf.head(2)) . 5007390 rows for election type = &#39;003&#39; and election date= &#39;20201103&#39; county_num registration_num election_date election_type party absentee 5419 019 00591608 20201103 003 Y 5420 027 00430264 20201103 003 Y provisional supplemental 5419 N N 5420 N N . print(gendf[&#39;party&#39;].value_counts()) . 5007390 Name: party, dtype: int64 . cnames = [&#39;absentee&#39;, &#39;provisional&#39;, &#39;supplemental&#39;] print(&quot;count of votes by type&quot;) print(gendf[cnames].value_counts()) print(&quot; nPercentage of votes by type&quot;) print(np.round(100*gendf[cnames].value_counts(normalize=True), 1)) . count of votes by type absentee provisional supplemental Y N N 4018954 N N N 981654 Y N 6476 N Y 165 Y Y N 124 N Y Y 12 Y Y Y 4 N Y 1 dtype: int64 Percentage of votes by type absentee provisional supplemental Y N N 80.3 N N N 19.6 Y N 0.1 N Y 0.0 Y Y N 0.0 N Y Y 0.0 Y Y Y 0.0 N Y 0.0 dtype: float64 . More Questions and comments . From the table above we see that . over 4 million votes were &quot;absentee&quot; | 981,654 votes cast were not &quot;absentee&quot;, &quot;provisional&quot; or &quot;supplemental&quot;, so what were these? Are these in-person on the day of the election? | I don&#39;t know what &quot;provitional&quot; is, but with around 5,000 votes cast that way, not insignificant | probably can ignore &quot;supplemental&quot; | note that at least 124+12+4+1 voters cast votes in at least 2 ways. it could be more since this the other category seems to be just implied. So we don&#39;t know how many were other AND &quot;absentee&quot; or other AND &quot;supplemental&quot; | . | . | . | . cnames = [&#39;absentee&#39;, &#39;provisional&#39;, &#39;supplemental&#39;] inames = [] for name in tqdm(cnames, smoothing=0.2): print(&quot;converting &#39;{0}&#39;&quot;.format(name)) temp = gendf[name].apply(lambda x: int(x==&#39;Y&#39;)) print(&quot;{0} {1}&quot;.format(len(temp), gendf.shape[0])) iname = name + &quot;_int&quot; inames.append(iname) gendf[iname] = temp gendf[&#39;other_int&#39;] = [int(x==0) for x in gendf[inames].sum(axis=1)] inames.append(&#39;other_int&#39;) gendf[&#39;votes_int&#39;] = gendf[inames].sum(axis=1) print(gendf.iloc[:, -5:].head(2)) . 0%| | 0/3 [00:00&lt;?, ?it/s] . converting &#39;absentee&#39; . &lt;ipython-input-37-a07db72805bf&gt;:9: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy 33%|████████████████████████████ | 1/3 [00:01&lt;00:02, 1.33s/it] . 5007390 5007390 converting &#39;provisional&#39; . 67%|████████████████████████████████████████████████████████ | 2/3 [00:02&lt;00:01, 1.34s/it] . 5007390 5007390 converting &#39;supplemental&#39; . 100%|████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:04&lt;00:00, 1.34s/it] . 5007390 5007390 . . absentee_int provisional_int supplemental_int other_int votes_int 5419 1 0 0 0 1 5420 1 0 0 0 1 . &lt;ipython-input-37-a07db72805bf&gt;:10: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy &lt;ipython-input-37-a07db72805bf&gt;:12: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy . allcols = [&#39;county_num&#39;, &#39;votes_int&#39;] gcols = [&#39;county_num&#39;] gdf = gendf[allcols].groupby(by=gcols).sum().reset_index() gdf.sort_values(by=&#39;votes_int&#39;, inplace=True, ascending=False) gdf.head(10) . county_num votes_int . 59 060 | 520878 | . 66 067 | 416167 | . 32 033 | 396538 | . 43 044 | 371550 | . 27 028 | 145063 | . 24 025 | 134090 | . 57 058 | 129765 | . 74 075 | 123512 | . 30 031 | 111997 | . 68 069 | 90501 | . dpath = &quot;data&quot; fname = &quot;counties.txt&quot; fpath = os.path.join(dpath, fname) with open(fpath, mode=&quot;r&quot;) as fp: clines = fp.readlines() ctups = [] for i, line in enumerate(clines): parts = str(line).strip().split(&#39; &#39;) if len(parts) &lt; 2: msg = &quot;line &#39;{0}&#39; has {1} parts, should have &gt; 2&quot;.format(i, line) msg += &quot;line: {0}&quot;.format(line) print(msg) continue code = str(parts[0]).strip() county = &quot; &quot;.join(parts[1:]) ctups.append((code, county)) countydf = pd.DataFrame(ctups) countydf.columns = [&#39;county_num&#39;, &#39;CountyName&#39;] countydf . county_num CountyName . 0 001 | APPLING | . 1 002 | ATKINSON | . 2 003 | BACON | . 3 004 | BAKER | . 4 005 | BALDWIN | . ... ... | ... | . 154 155 | WHITFIELD | . 155 156 | WILCOX | . 156 157 | WILKES | . 157 158 | WILKINSON | . 158 159 | WORTH | . 159 rows × 2 columns . x = gdf.merge(countydf, on=&quot;county_num&quot;) x.set_index(&quot;CountyName&quot;, inplace=True) x.head() . county_num votes_int . CountyName . FULTON 060 | 520878 | . GWINNETT 067 | 416167 | . COBB 033 | 396538 | . DEKALB 044 | 371550 | . CHEROKEE 028 | 145063 | . Merge back with voters and vote counts . y = presCombo.join(x) y[&#39;voter_mismatch&#39;] = y[&#39;Votes&#39;] - y[&#39;votes_int&#39;] y[&#39;abs_mismatch&#39;] = y[&#39;voter_mismatch&#39;].apply(lambda x: abs(x)) y.sort_values(by=&#39;abs_mismatch&#39;, ascending=False, inplace=True) y.head(10) . Votes TotalVoters PctVoted county_num votes_int voter_mismatch abs_mismatch . CountyName . FULTON 524659 | 808742 | 64.873 | 060 | 520878 | 3781 | 3781 | . COBB 393746 | 537659 | 73.233 | 033 | 396538 | -2792 | 2792 | . GWINNETT 413865 | 582917 | 70.999 | 067 | 416167 | -2302 | 2302 | . STEPHENS 11885 | 18078 | 65.743 | 127 | 10956 | 929 | 929 | . SPALDING 30116 | 46088 | 65.345 | 126 | 29234 | 882 | 882 | . HENRY 122742 | 172241 | 71.262 | 075 | 123512 | -770 | 770 | . DEKALB 370804 | 547802 | 67.689 | 044 | 371550 | -746 | 746 | . CHATHAM 133420 | 202999 | 65.724 | 025 | 134090 | -670 | 670 | . FORSYTH 129305 | 164279 | 78.711 | 058 | 129765 | -460 | 460 | . CLARKE 51333 | 76848 | 66.798 | 029 | 51752 | -419 | 419 | . print() pos_sum = sum([x if x &gt; 0 else 0 for x in y[&#39;voter_mismatch&#39;].values]) neg_sum = sum([-x if x &lt; 0 else 0 for x in y[&#39;voter_mismatch&#39;].values]) print(&quot;pos_sum= {0}, neg_sum= {1}, abs_sum= {2}, net_sum= {3}&quot;.format(pos_sum, neg_sum, y[&#39;abs_mismatch&#39;].sum(), y[&#39;voter_mismatch&#39;].sum())) . pos_sum= 7174, neg_sum= 16227, abs_sum= 23401, net_sum= -9053 . y[&#39;pct_voters2&#39;] = np.round(100 * y[&#39;votes_int&#39;]/y[&#39;TotalVoters&#39;], 2) y.head() . Votes TotalVoters PctVoted county_num votes_int voter_mismatch abs_mismatch pct_voters2 . CountyName . FULTON 524659 | 808742 | 64.873 | 060 | 520878 | 3781 | 3781 | 64.41 | . COBB 393746 | 537659 | 73.233 | 033 | 396538 | -2792 | 2792 | 73.75 | . GWINNETT 413865 | 582917 | 70.999 | 067 | 416167 | -2302 | 2302 | 71.39 | . STEPHENS 11885 | 18078 | 65.743 | 127 | 10956 | 929 | 929 | 60.60 | . SPALDING 30116 | 46088 | 65.345 | 126 | 29234 | 882 | 882 | 63.43 | . choices = (&quot;Trump&quot;, &quot;Biden&quot;) choice_dfs = [None]*len(choices) for i, choice in enumerate(choices): tempdf = presdf.loc[presdf[&quot;Choice&quot;].str.contains(choice), [&quot;CountyName&quot;, &quot;Votes&quot;]].groupby([&quot;CountyName&quot;]).sum() tempdf.rename(columns={&quot;Votes&quot;:choice}, inplace=True) choice_dfs[i] = tempdf widedf = choice_dfs[0].merge(choice_dfs[1], on=&quot;CountyName&quot;) widedf[&#39;BidenMargin&#39;] = widedf[&#39;Biden&#39;] - widedf[&#39;Trump&#39;] widedf.sort_values(by=&quot;BidenMargin&quot;, ascending=&quot;False&quot;, inplace=True) widedf.reset_index(inplace=True) widedf[&quot;sign&quot;] = [0 if y &gt; 0 else 1 for y in widedf[&#39;BidenMargin&#39;]] widedf[&quot;Both&quot;] = widedf[&quot;Trump&quot;] + widedf[&quot;Biden&quot;] widedf . CountyName Trump Biden BidenMargin sign Both . 0 CHEROKEE | 99587 | 42794 | -56793 | 1 | 142381 | . 1 FORSYTH | 85122 | 42203 | -42919 | 1 | 127325 | . 2 HALL | 64170 | 25031 | -39139 | 1 | 89201 | . 3 COWETA | 51501 | 24210 | -27291 | 1 | 75711 | . 4 BARTOW | 37674 | 12092 | -25582 | 1 | 49766 | . ... ... | ... | ... | ... | ... | ... | . 154 COBB | 165459 | 221846 | 56387 | 0 | 387305 | . 155 GWINNETT | 166413 | 241827 | 75414 | 0 | 408240 | . 156 CLAYTON | 15813 | 95476 | 79663 | 0 | 111289 | . 157 FULTON | 137240 | 381144 | 243904 | 0 | 518384 | . 158 DEKALB | 58373 | 308227 | 249854 | 0 | 366600 | . 159 rows × 6 columns . x = widedf[[&#39;CountyName&#39;, &#39;Both&#39;]].groupby(by=&quot;CountyName&quot;).sum() x.sort_values(by=&quot;Both&quot;, inplace=True) county_cat = pd.Categorical(x.index, categories=x.index) county_cat cat_df = pd.DataFrame({&quot;CountyName&quot;: x.index, &quot;CountyCat&quot;: county_cat}) cat_df z = widedf.merge(cat_df, on=&quot;CountyName&quot;) z . CountyName Trump Biden BidenMargin sign Both CountyCat . 0 CHEROKEE | 99587 | 42794 | -56793 | 1 | 142381 | CHEROKEE | . 1 FORSYTH | 85122 | 42203 | -42919 | 1 | 127325 | FORSYTH | . 2 HALL | 64170 | 25031 | -39139 | 1 | 89201 | HALL | . 3 COWETA | 51501 | 24210 | -27291 | 1 | 75711 | COWETA | . 4 BARTOW | 37674 | 12092 | -25582 | 1 | 49766 | BARTOW | . ... ... | ... | ... | ... | ... | ... | ... | . 154 COBB | 165459 | 221846 | 56387 | 0 | 387305 | COBB | . 155 GWINNETT | 166413 | 241827 | 75414 | 0 | 408240 | GWINNETT | . 156 CLAYTON | 15813 | 95476 | 79663 | 0 | 111289 | CLAYTON | . 157 FULTON | 137240 | 381144 | 243904 | 0 | 518384 | FULTON | . 158 DEKALB | 58373 | 308227 | 249854 | 0 | 366600 | DEKALB | . 159 rows × 7 columns . z.dtypes . CountyName object Trump int64 Biden int64 BidenMargin int64 sign int64 Both int64 CountyCat category dtype: object . import plotnine as pn from plotnine import ggplot, geom_point, geom_bar, aes, stat_smooth, facet_wrap pn.options.figure_size = (10, 30) (ggplot(z) + pn.coord_flip() + geom_bar(aes(x=&#39;CountyCat&#39;, y=&#39;BidenMargin&#39;,color=&quot;sign&quot;), stat=&#39;identity&#39;)) . &lt;ggplot: (166458227821)&gt; . . &lt;ggplot: (149148345067)&gt; . &lt;/div&gt; | | | | | | | | | | | | . .",
            "url": "https://jhmuller.github.io/ga-votes-2020-11-03/2020/12/26/ga.html",
            "relUrl": "/2020/12/26/ga.html",
            "date": " • Dec 26, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jhmuller.github.io/ga-votes-2020-11-03/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jhmuller.github.io/ga-votes-2020-11-03/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jhmuller.github.io/ga-votes-2020-11-03/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jhmuller.github.io/ga-votes-2020-11-03/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}